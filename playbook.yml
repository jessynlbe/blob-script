---

- name: Retrieve Azure VMs in a resource group
  
  hosts: localhost
  vars:
    - vm_configurations: {}
  vars_files: my_vars.yml
  tasks:

  - name: Retrieve virtual machines in list of resource groups
    azure_rm_virtualmachine_info:
      resource_group: '{{ item }}'
      tenant: "{{ tenant }}"
      subscription_id: "{{ subscription_id }}"
      client_id: "{{ client_id }}"
      secret: "{{ secret }}"
    loop: ['test_rg-socle-francecentral-test-001','test_rg-legacy-francecentral-prod-001']
    register: list_vms

  - name: Set fact with vm and resource group
    set_fact:
      vm_configurations: "{{ vm_configurations | combine({item.name: [item.resource_group, item.admin_username, item.os_type, item.network_interface_names[0]] }) }}"
    loop: "{{ list_vms.results | map(attribute='vms') | flatten }}"

  - name: Get facts for network interfaces
    azure_rm_networkinterface_info:
      resource_group: "{{ item.value[0] }}"
      name: "{{ item.value[3] }}"
      tenant: "{{ tenant }}"
      subscription_id: "{{ subscription_id }}"
      client_id: "{{ client_id }}"
      secret: "{{ secret }}"
    loop: "{{ vm_configurations | dict2items }}"
    register: list_nics

  - name: Add Private Ip on vm_configurations
    set_fact:
      vm_configurations: "{{ vm_configurations | combine({item.item.key: vm_configurations[item.item.key] + [item.networkinterfaces[0].ip_configurations[0].private_ip_address]}) }}"
    loop: "{{ list_nics.results | flatten }}"

  - name: Retrieve Key Vault Secrets
    azure.azcollection.azure_rm_keyvaultsecret_info:
      vault_uri: "https://kv-common-fc-test-001.vault.azure.net/"
      name: "{{ item.key | replace('vm','pwd') | regex_replace('_','-') }}"
      tenant: "{{ tenant }}"
      subscription_id: "{{ subscription_id }}"
      client_id: "{{ client_id }}"
      secret: "{{ secret }}"
    register: list_secrets
    loop: "{{ vm_configurations | dict2items }}"
    changed_when: item.value[2] == "Windows"

  - name: Add secrets in vm_configurations
    set_fact:
      vm_configurations: "{{ vm_configurations |  
      combine({item.item.key: vm_configurations[item.item.key] + ([item.secrets[0].secret] if (item.secrets | length) != 0 else [''] )}  )}}"
    loop: "{{ list_secrets.results }}"

  - name: Add Linux host
    add_host:
      group: linux
      hostname: "{{ item.key }}"
      ansible_user: "{{ item.value[1] }}"
      ansible_host: "{{ item.value[4] }}"
    when: item.value[2] == "Linux"
    loop: "{{ vm_configurations | dict2items }}"

  - name: Add Windows host
    add_host:
      group: windows
      hostname: "{{ item.key }}"
      ansible_user: "{{ item.value[1] }}"
      ansible_host: "{{ item.value[4] }}"
      ansible_password: "{{ item.value[5] }}"
      ansible_connection: winrm
      ansible_port: 9182
      ansible_winrm_transport: ntlm
      ansible_winrm_server_cert_validation: ignore
    when: item.value[2] == "Windows"
    loop: "{{ vm_configurations | dict2items }}"

  - name: dezdez
    debug:
      msg: "{{ item.value[5] }}"
    loop: "{{ vm_configurations | dict2items }}"

- hosts: windows
  gather_facts: no
  tasks:

  - name: Print Windows
    win_ping:
